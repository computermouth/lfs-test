#!/bin/bash
if [ -f $HOME/mysql.env ];then
	. $HOME/mysql.env
fi


GREEN="\033[1;32m"
RED="\033[1;4;31m"
NORMAL="\033[0m"

SUCCEED=0
FAILED=1
#Configuration
DATA_DIR="/var/mysql/data/"
SSH_USER="mysql"
BACKUP_VOLUMN="/var/mysql"
BACKUP_DIR="/var/mysql/backup/"
RETENTION=4 # days
MYSQL_SVR_USER="backupuser"
MYSQL_SVR_PASSWORD="b@ckup0lny"
#MYSQLBACKUP_SAFE_OPTIONS=" --with-timestamp --compress --no-history-logging --no-locking --sleeps=2000"
#MYSQLBACKUP_FASE_OPTIONS=" --with-timestamp --compress --no-history-logging "
MYSQLBACKUP_OPTIONS=" --with-timestamp --compress --no-locking --no-history-logging --connect-if-online"
#mysqldump with quick will force mysqldump to retrieve one row at a time eath than retrieving the entire row set and fuggering it in memory,
#MYSQLDUMP_OPTIONS="  --flush-logs --routines --single-transaction --master-data=2 --all-databases  --quick "
MYSQLDUMP_OPTIONS="  --routines --triggers  --single-transaction --all-databases  --quick "
STANDARD_SCHEDULE="ionice -c2 -n7 nice -n 19"
MYSQLBACKUP_SCHEDULE=${STANDARD_SCHEDULE}
MYSQLDUMP_SCHEDULE=${STANDARD_SCHEDULE}
TAR_SCHEDULE=${STANDARD_SCHEDULE}
MYSQLBACKUP_CMD=${MYSQLBACKUP_SCHEDULE}" mysqlbackup"
MYSQLDUMP_CMD=${MYSQLDUMP_SCHEDULE}" mysqldump"
TAR_CMD=${TAR_SCHEDULE}" tar" 

SSH_KEY="$HOME/.ssh/mysqldba_hq_dsa"
SSH_CMD=`which ssh`
#SSH="/usr/bin/ssh -a -i ${SSH_KEY} -v"
SSH="${SSH_CMD} -i ${SSH_KEY}"
TAR="tar "
DEBUG=1
INFO=1

declare -a dbs_dump
declare -a dbs_hot
declare -a dbs_binlog

dbs_hot=( )
dbs_dump=()
dbs_binlog=()

dbType="undefined"
OS="undefined"

#for some of systems, export the two env variables below to ensure ssh work with cron enviroment
#export SSH_ASKPASS=/usr/libexec/openssh/gnome-ssh-askpass
#auth=`find /tmp -user $LOGNAME -type s -name "*agent*" -print 2>/dev/null | head -1`
#export SSH_AUTH_SOCK=${auth}

#backup_local.conf will be overwrotten anything in this configuration file
if [ -f $SCRIPT_PATH/backup/backup_local.conf ]; then
	echo "Loading $SCRIPT_PATH/backup/backup_local.conf..."
 	. $SCRIPT_PATH/backup/backup_local.conf
	echo "Done"
fi

echo "the extra backup config file is $0 $1" 
if [ $# -gt 0 ]; then
	if [ -f $SCRIPT_PATH/backup/$1 ]; then
		echo "Loading $SCRIPT_PATH/backup/$1..."
               	. $SCRIPT_PATH/backup/$1
		echo "Done"
	elif [ ! -f $SCRIPT_PATH/backup/backup_local.conf ]; then
		echo "This is no local backup configuration file avaialbe, the script may not be working correctly."
	fi
fi



